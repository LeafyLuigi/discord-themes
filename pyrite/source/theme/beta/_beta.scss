@use "backend" as *;
/* Begin Beta Branch */
// Expect it to not work fully.
html[lang="en-GB"],
html[lang="fr"] {
	//test colors lol
	// --green-color: green;
	// --yellow-color: yellow;
	// --red-color: red;
	// --link-color: cyan;
	// --offline-color: white;
}
// HOLY SHIT FUCK SAKE
// this stuff is basically thrown together real quick,
// don't expect it to last forever.
#{c(main visualRefresh)} {
	// VARIABLE FIXING
	--custom-app-top-bar-height: 0px; // for removing top bar
	&#{c(main light)},
	&#{c(main dark)},
	&#{c(main darker)},
	&#{c(main midnight)},
	#{c(main light)},
	#{c(main dark)},
	#{c(main darker)},
	#{c(main midnight)} {
		--input-background: var(--card-background);
		--modal-background: var(--card-background);
		--modal-footer-background: transparent;
		--text-positive: var(--green-color);
		--text-warning: var(--yellow-color);
		--text-link: var(--link-color);
		--scrollbar-auto-scrollbar-color-thumb: var(--primary-color);
		--scrollbar-auto-scrollbar-color-track: transparent;
		--scrollbar-auto-thumb: var(--primary-color);
		--scrollbar-auto-track: transparent;
		--scrollbar-thin-thumb: var(--primary-color);
		--background-message-hover: transparent;
		--background-mentioned: rgb(from var(--mention-background) r g b/var(--mention-opacity));
		--background-mentioned-hover: rgb(from var(--mention-background) r g b/calc(0.2 + var(--mention-opacity)));
		--background-code: var(--card-background);
	}
	:is(
		// settings
		#{c(userSettings standardSidebarView)}
	) {
		background: transparent;
	}
	// and card stuff
	:is(
		// right click menu
		#{c(modals menus menu)}
	) {
		background: $card;
	}
	// and middle stuff
	:is(
		// settings middle
		#{c(userSettings contentRegionScroller)}
	) {
		background: $middle;
	}
	// and header stuff
	:is(
		// top bar thing
		#{c(topBar bar)}
	) {
		background: $header;
	}
	// and side stuff
	:is(
		// settings side
		#{c(userSettings sidebarRegionScroller)}
	) {
		background: $side;
	}

	#{c(messageRequests container)} {
		border-top: none;
	}

	// remove help button
	#{c(topBar trailing container)} #{c(main anchorLink)}[href="https://support.discord.com"] {
		display: none;
	}
	// move inbox icon back down; remove top bar
	& {
		// icon for margin-right; this must be done differently for windows
		#{c(chat layerWrapper)},
		#{c(chat)}:not(#{c(chat threadSidebarOpen)}) {
			#{c(header toolbar)} {
				margin-right: calc(32px + var(--space-xs));
			}
		}
		&#{c(os win)} {
			#{c(chat layerWrapper)},
			#{c(chat)}:not(#{c(chat threadSidebarOpen)}) {
				#{c(header toolbar)} {
					// 32px for inbox icon, space-xs for gap, check if old windows titlebar is enabled and if not mult 3 for button width
					margin-right: calc(32px + var(--space-xs) + 3 * (1 - var(--windows-titlebar-enabled,0)) * var(--win-min-max-close-button-width));
				}
				// #{c(header headerTitle)} {
				// 	// -webkit-app-region: drag;
				// 	// padding-right: calc(var(--space-xs) + 32px + var(--space-xs) + 3 * (1 - var(--windows-titlebar-enabled,0)) * var(--win-min-max-close-button-width));
				// }
			}
		}
		// z-index so it matches the header bar
		#{c(topBar bar)} {
			z-index: 1011;
		}
		// remove the centre part with the name and icon
		#{c(topBar title container)} {
			display: none;
		}
		// windows only stuff
		&#{c(os win)} {
			#{c(topBar trailing winButtons)} {
				gap: 0;
				&::before {
					content: none;
				}
			}
			#{c(topBar trailing winButton)} {
				width: var(--win-min-max-close-button-width);
				height: 48px;
			}
			#{c(topBar trailing recentsIcon)} {
				right: var(--space-xs);
			}
		}
		// windows and mac
		&:is(#{c(os win)}, #{c(os mac)}) {
			#{c(topBar trailing container)} {
				gap: 0;
				top: 24px;
			}
			#{c(topBar bar)} {
				@include bg($top:0,$bottom:null,$right:0,$left:0,$h:28px,$war:drag,$z:2);
			}
			// make sure shit is still clickable
			:is(
				#{c(header title)},
				#{c(sidebar server header clickable)}
			) {
				-webkit-app-region: no-drag;
			}
		}
		// linux and web
		&:is(#{c(os linux)}, #{c(os web)}) {
			#{c(topBar trailing recentsIcon)} {
				position: absolute;
				top: 8px;
			}
		}
		// linux, web and mac
		:is(#{c(os linux)}, #{c(os web)}, #{c(os mac)}) {
			#{c(chat layerWrapper)},
			#{c(chat)}:not(#{c(chat threadSidebarOpen)}) {
				#{c(header headerTitle)} {
					padding-right: calc(var(--space-xs) + 32px);
				}
			}
		}
	}
	// windows stuff
	&#{c(os win)} {
		// fix server list
		#{c(serverList servers)} {
			&::after {
				content: none;
			}
		}
		// window buttons aren't there anymore
		#{c(header toolbar)} {
			padding-right: unset;
			margin-right: unset;
		}
	}
	// mac stuff
	// &#{c(os mac)} {
	// }
	// linux/web stuff
	&:is(
		#{c(os linux)},
		#{c(os web)}
	) {
		// ::before and ::after
		#{c(serverList servers)} {
			&::after {
				content: none;
			}
			// @include bg($bg:$header,$h:48px);
		}
		// list
		#{c(serverList tree)} {
			height: calc(100% - 48px);
		}
	}
	// tooltip pointers
	#{c(tooltips pointer)} {
		display: none;
	}
}

// REMOVE SHADOWS
#{c(main light)},
#{c(main dark)},
#{c(main darker)},
#{c(main midnight)} {
	// takes initial string `--shadow` then appends each key/value going down the list, ie `--shadow-low`
	// sets the value to predetermined `unset` (tho changeable for testing)
	// each key also has an associated `-filter` variable. ie `--shadow-border-filter`
	$value: unset;
	$filterValue: unset; // use `drop-shadow()` for testing
	$list: (
		"-border",
		"-button-overlay",
		"-high",
		"-ledge",
		"-low",
		"-low-active",
		"-low-hover",
		"-medium",
		"-mobile-navigator-x",
		"-top-high",
		"-top-ledge",
		"-top-low",
	);
	@each $i in $list {
		--shadow#{$i}: #{$value};
		--shadow#{$i}-filter: #{$filterValue}; 
	}
}

// TODO WITH THE REFRESH:
// Move inbox button down into header bar
// Fix notices
// a whole host of other unthemed areas