@use "start" as *;
@use "backend" as *;

@use "sass:list";
@use "sass:meta";
@use "sass:string";
@use "sass:map";
/* Begin I18N */
/* If you wish to translate strings from this file into another language, copy below as a base and send a message in the support server. */
/* In doing so you'll be given a translator tag and a role on said support server. */
html {
	// By default this is entirely used for the en-GB and en-US langs. fallback below for en-US
	--theme-name: "Pyrite";
	// --theme-name-beta: "Pyrite Beta Branch";

	// Tags are used for contributors who have assisted one way or another with the theme.
	--tag-dev: "Theme Dev";
	--tag-translator: "Theme Translator";
	--tag-helper: "Theme Helper";
	
	--settings-lang-translate: "If you want to add (or fix) translations, feel free to join the support server.";
	--theme-update-warning: "Your version of Pyrite is outdated. Please backup your theme and redownload.";

	// CSS incompatibility warnings; used within this file.
	--css-generic-recommendation: "As a result of the above issue(s), part of the theme may not work. "; // keep the space at the end.
	--css-outdated-windows: "You should probably update to a supported Windows version then update Discord.";
	--css-outdated-mac: "You should probably update to a supported macOS version then update Discord.";
	--css-outdated-linux: "Honestly, I trust that you know what you're doing. Best update the package to the latest version if possible.";
	--css-outdated-browser: "You should update your browser or the OS should you no longer be able to update your browser.";
	
	// for these, leave the `\a` at the end as that's for a newline.
	--css-has-selector-broken: "CSS :has() selector does not work.\a";
	--css-oklab-broken: "Oklab colour space missing.\a";
	--css-relative-colour-broken: "Relative colour mixing does not work.\a";
	--css-nesting-selector-broken: "CSS & nesting selector does not work.\a";
	--css-color-mix-broken: "Unable to mix colours using color-mix().\a";
	--css-gradient-colour-space-broken: "Gradients lack colour space support.\a";

	// Used within codelangs file for Codeblocks sans formatting or language
	--code-plain-text: "Plain Text";

	// Within error file
	// Error page partial jokes - Not every joke will be listed and instead this is only the button for the time being.
	--error-reload: "please click this";
	--error-mac-do-not-restart: "DO NOT RESTART YOUR COMPUTER.";

	// Below within this rule aren't to be copied but are always applied globally. Both British English and French are used as beta branches.
	--beta-en-GB: "Pyrite Beta Branch";
	--beta-fr: "Branche Bêta de Pyrite";
}
// Just in case of stupid American spellings
[lang="en-US"] {
	--css-relative-colour-broken: "Relative color mixing does not work.\a";
	--css-oklab-broken: "Oklab color space broken.\a";
	--css-color-mix-broken: "Unable to mix colors using color-mix().\a";
	--css-gradient-colour-space-broken: "Gradients lack color space support.\a";
}
// Partially translated by Leafy
[lang="fr"] {
	--theme-name: "Pyrite";
	// --theme-name-beta: "Branche Bêta de Pyrite";
}

// Current Untranslated Discord Languages (2022-09-02) - Uncomment whatever one you'd like to edit and go for it.
// [lang="da"] {}
// [lang="de"] {}
// [lang="es-ES"] {}
// [lang="es-419"] {}
// [lang="hr"] {}
// [lang="it"] {}
// [lang="lt"] {}
// [lang="hu"] {}
// [lang="nl"] {}
// [lang="no"] {}
// [lang="pl"] {}
// [lang="pt-BR"] {}
// [lang="ro"] {}
// [lang="fi"] {}
// [lang="sv-SE"] {}
// [lang="vi"] {}
// [lang="tr"] {}
// [lang="cs"] {}
// [lang="el"] {}
// [lang="bg"] {}
// [lang="ru"] {}
// [lang="uk"] {}
// [lang="hi"] {}
// [lang="th"] {}
// [lang="zh-CN"] {}
// [lang="ja"] {}
// [lang="zh-TW"] {}
// [lang="ko"] {}

// Below are things that use the translations above.
/* User Tags */
$tags: (
	"dev": ( // Main developer of the theme.
		"309976820109803520", // Leafy
	),
	"helper": ( // People who have contributed to the theme one way or another, be it support or CSS.
		"126652966265421824", // Scars
		"393900343135830016", // Nyx
		"240437190339854337", // Leozard
	),
	// "translator": ( // People who have translated the theme, even partially.

	// ),
);

// group = what tag will be used, will be inserted as `var(--tag-#{$group})`
// user = string list for what user(s) will have that tag
// itm = an item in alias when it's a list
// output --lang is the name, as above
@each $group, $user in $tags {
	// for lists
	$k: "";
	@if meta.type-of($user) == list {
		@if list.length($user) > 1 {
			$k: ":is("; // start :is(
			@for $i from 1 through list.length($user) {
				$k: string.insert($k,"[src*=\"" + list.nth($user,$i) + "\"],",-1);
			}
			// remove extra comma, add closing )
			$k: string.slice($k,0,-2) + ")";
		} @else {
			$k: "[src*=\"" + list.nth($user,1) + "\"]";
		}
	} @else {
	// and for single strings
		$k: "[src*=\"#{$user}\"]";
	}
	#{c(chat chatAvatar)}#{$k} ~ #{c(chat chatHeaderUsername)} {
		--local-tag: var(--tag-#{$group});
	}
}

/* Tags */
#{c(chat messageContents)} > #{c(chat chatAvatar)} ~ #{c(chat chatHeaderUsername)} #{c(chat chatUsername)}:after {
	content: var(--local-tag, none);
	color: currentcolor;
	font-size: 11px;
	display: inline-block;
	margin-left: 4px;
	transform: skewX(-15deg);
}

/* Version */
#{c(userSettings sidebarInfo)} {
	&::after {
		content: $theme-name string.insert($version, " - ", 0);
		font-style: italic;
		color: var(--text-muted);
		font-size: 12px;
		line-height: 16px;
	}
}

// /* Beta Version (only for French and British English) */
// html:is([lang="en-GB"],[lang="fr"]) #{c(userSettings sidebarInfo)} {
// 	&::after {
// 		content: var(--theme-name-beta) string.insert($version, " - ", 0);
// 	}
// }

// /* Language Tab Beta Labels (only for French and British English) */
// #language-tab #{c(userSettings radioBarInfo)}:after {
// 	font-size: 14px;
// 	color: $primary;
// 	font-style: italic;
// }
// #language-tab div[role="radiogroup"] #{c(userSettings radioGroupItem)} {
// 	&:nth-child(3) #{c(userSettings radioBarInfo)}:after {
// 		content: var(--beta-en-GB);
// 	}
// 	&:nth-child(7) #{c(userSettings radioBarInfo)}:after {
// 		content: var(--beta-fr);
// 	}
// }

// /* Redownload pls bar */
// #{c(main appContainer)}::before {
// 	content: var(--theme-update-warning);
// 	text-align: center;
// 	position: absolute;
// 	color: #fff;
// 	white-space: pre-wrap;
// 	box-sizing: border-box;
// 	padding: 10px 0;
// 	background-color: $header;
// 	display: var(--update-notice-feb25, block);
// 	z-index: 2500;
// }

// CSS testing
// define list of things to test; do this in order of oldest supported.
$cssSupportList: (
	// example:
	// 
	// "var-name" which becomes "--css-var-name-broken": "as defined above";
	// (
	// 	test: "this is what goes in the brackets for @support."
	// 	(NYI) win|mac|lin|web : 0|1 -- 1 to skip testing on that platform, implied 0
	// )
	// 
	// explicit testing for chrome 108 / electron 22
	// (last version for windows 7/8/8.1 and mac Catalina)
	// is not done. those users can stop whinging.
	"has-selector": (
		// :has is based and is used in certain parts of the theme.
		// cr 105 / ff 121 / s 15.4
		test: "selector(div:has(+a))"
	),
	"color-mix": (
		// mixing colours is fun.
		// cr 111 / ff 113 / s 16.2
		test: "color: color-mix(in srgb, yellow 100%, blue)"
	),
	"gradient-colour-space": (
		// gradients need to support colour spaces otherwise they look like utter shit.
		// cr 111 / ff 127 / s 16.2
		test: "background-image: linear-gradient(in srgb, #ff0, #00f)"
	),
	"oklab": (
		// oklab is based. https://youtu.be/nJlZT5AE9zY
		// only really gonna be used for transitions between colours
		// cr 111 / ff 113 / s 15.4
		// relative for below (untested)
		// cr 119 / ff 128 / s 16.4
		test: "color: oklab(0.5 0.4 0.4)" // should be red-yellow
	),
	"relative-colour": (
		// only testing hsl but it's supported in all browsers
		// cr 119 / ff 128 / s 18 (16.4 with required % values)
		test: "color: hsl(from rgb(255 255 255 / 0%) h s l / alpha)"
	),
	"nesting-selector": (
		// eventually sass will allow for the native css nesting selector to function.
		// https://sass-lang.com/blog/sass-and-native-nesting/#the-plan-for-sass
		// native & works as follows:
		// div, span, #id {
		// 	& button {}
		// }
		// h5, h6, .class {
		// 	body & {}
		// }
		// div i {
		//  span & {}
		// }
		// which is equal to
		// :is(div, span, #id) button {} | works fine despite the mixed specificities
		// body :is(h5, h6, .class) {} | works fine again with mixed specificities
		// span :is(div, i) {} | not ideal
		// 
		// test checks for fully supported, not half broken webkit/blink initial implementation.
		// cr 120 (full) / ff 117 / s 17.2 (full)
		test: "selector(div &)"
	)
);

$i: 1; // for below @each, used for vars
$supportsList: ""; // currently empty string which would become @supports not (test) or not (test) or not (test) etc {}
$issueList: ""; // currently empty string which becomes the value for `content`
@each $css, $val in $cssSupportList {
	@if map.get($val, "test") == null {
		@error "No test found. Aborting.";
	} @else {
		$supportsList: $supportsList + "(not (" + map.get($val, "test") + ")) or ";
	}
	// problematic things will go under root
	@supports not (#{map.get($val,"test")}) {
		:root {
			--p#{$i}: var(--css-#{$css}-broken);
		}
	}
	$issueList: $issueList + "var(--p#{$i},\"\") ";
	$i: $i + 1;
}
$supportsList: string.slice($supportsList, 1, -6) + ")";
@supports #{$supportsList} {
	#{c(main bg)} {
		&::before,
		&::after {
			margin: 1rem;
			position: absolute;
			color: #fff;
			white-space: pre-wrap;
			box-sizing: border-box;
			padding: 1rem;
			font-size: 1rem;
			background: #000;
			display: block;
			z-index: 2500;
			opacity: 0;
			transition: opacity 0.5s 10s;
		}
		&::before {
			content: #{$issueList};
		}
		&::after {
			bottom: 0;
			right: 0;
		}
		// if win != 1
		#{c(os win)} & {
			&::after {
				content: var(--css-generic-recommendation) var(--css-outdated-windows);
			}
		}
		// if mac != 1
		#{c(os mac)} & {
			&::after {
				content: var(--css-generic-recommendation) var(--css-outdated-mac);
			}
		}
		// if lin != 1
		#{c(os linux)} & {
			&::after {
				content: var(--css-generic-recommendation) var(--css-outdated-linux);
			}
		}
		// if web != 1
		#{c(os web)} & {
			&::after {
				content: var(--css-generic-recommendation) var(--css-outdated-browser);
			}
		}
	}
}