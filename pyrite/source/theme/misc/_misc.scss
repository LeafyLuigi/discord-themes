@use "start" as *;
@use "backend" as *;
/* Begin Keyframes */

// ALWAYS USE FULL MOTION BEFORE ANIMATION.

// used in: misc
@keyframes monke {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

// used in: chat
@keyframes gifRipple {
	0% {
		transform:scale(.4);
		opacity:1;
	}
	90% {
		transform:scale(1.4);
		opacity:0;
	}
	100% {
		transform:scale(1.6);
		opacity:0;
	}
}
@keyframes gifBounce {
	25% {
		transform:scale(.6);
	}
	50% {
		transform:scale(1.2);
	}
	100% {
		transform:scale(1);
	}
}

// used in: error
@keyframes errorScrollMac {
	0% {
		height: 0%;
	}
	100% {
		height: 100%;
	}
}
@keyframes errorPopMac {
	0% {
		opacity: 0;
	}
	99% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

/* Begin Misc */
// Fonts
// body fonts
::placeholder, ::-webkit-input-placeholder,
body, button, input, select, textarea {
	font-family: var(--body-font);
}
::selection {
	background-color: $secondary;

}
// code fonts
code,
#{c(chatForm inlineCode)},
#{c(chatForm afterInlineCode)},
#{c(chatForm beforeInlineCode)},
#{c(chatForm codeLine)},
#{c(chatForm codeBlockText)} {
	font-family: var(--code-font);
}

// Background
#{c(main appMount)} {
	@include bg($h:100%,$w:100%,$bgf:var(--background-image) center/cover no-repeat var(--background-attachment),$f:var(--background-filter));
}

// Transparency to allow the background to work.
html, // because maybe?
body, // this one is here for transparency in bd to work
#{c(main appInner)},
#{c(main bg)} {
	background: transparent;
}
:is(#{c(main dark)},#{c(main light)}) #{c(main appMount)} {
	background: transparent;
}

// Set z-index
// #{c(main backdropWithLayer)} {
//   z-index: -1000;
// }
#{c(main pictureInPicture)} {
	z-index: 1050;
}
#{c(os titleBar)} {
	z-index: 1100;
}

// Loading Icon. Best seen removing the ONLY reaction of a type in the reaction modal.
#{c(main loadingSquare)} #{c(main loadingSquareItem)} {
	background-color: $primary;
}

// "Browse Channels" loading thing. Class could potentially be used elsewhere.
#{c(main loader)} {
	background: linear-gradient(to bottom, $header 48px, $middle 48px);
}

// Windows
#{c(os win platform)} {
	#{c(sidebar sidebar)} {
		border-radius: 0;
	}
	#{c(serverList servers)} {
		margin-top: 48px;
		overflow: visible;
		@include bg($z:1010,$bg:$header,$w:72px,$h:48px,$top:-48px);
	}
	#{c(header toolbar)} {
		padding-right: calc((1 - var(--hsl-bottom-enabled,0)) * 3 * var(--win-min-max-close-button-width));
		margin-right: -6px;
	}
}
#{c(os win type)} {
	padding-top: 0;
	margin-top: 0;
	height: 0;
	position: relative;
	@include bg($war:drag,$h:18px,$pos:fixed);
	& > #{c(os wordmark)} {
		display: none;
	}
}
#{c(os win button)} {
	width: var(--win-min-max-close-button-width);
	position: relative;
	top: 0;
	height: 48px;
}
#{c(os win buttonClose)}:hover {
	background: $red;
	color: var(--interactive-hover);
}

// Mac
#{c(os mac platform)} {
	#{c(serverList servers)} {
		margin-top: 48px;
		overflow: visible;
		@include bg($z:1050,$bg:$header,$w:72px,$h:48px,$top:-48px,$war:drag);
	}
	#{c(serverList scroller)} {
		padding-top: 4px;
	}
}
#{c(os mac buttonMin)},
#{c(os mac buttonMax)} {
	margin-left: 7px;
}
#{c(os mac type)} {
	top: calc(var(--channel-tabs-enabled,0) * calc(66px * var(--channel-tabs-enabled,0)));
}
#{c(os mac buttons)} {
	height: 48px;
}
// Linux, Web
:is(#{c(os linux)},#{c(os web)}) {
	#{c(serverList scroller)} {
		padding: 4px 0 0 0;
	}
	#{c(serverList servers)} {
		@include bg($bg:$header,$w:100%,$h:48px,$z:1010);
	}
	#{c(serverList tree)} {
		top: 48px;
		position: relative;
		height: calc(100vh - 48px);
	}
}

/* show/hide for side-panels (like member list and profile panels) */
:is(
#{c(chat chatContent)} > :is(div, aside),
#{c(chat chatContent)} > #{c(memberList container)}
) {
	background: var(--background,var(--side-shading));
	left: calc( ( var(--width,240px) - 60px ) * var(--hide-var, --hide-fallback-enabled));
	transition: var(--hide-speed,0.5s) transform ease-out, var(--hide-speed,0.5s) backdrop-filter ease-out;
	margin-left: calc( -1 * (( var(--width,240px) - 60px ) * var(--hide-var, --hide-fallback-enabled)));
	position: relative;
	z-index: 2; // just in case of buttons
}
#{c(main focused)} {
	:is(
	#{c(chat chatContent)} > :is(div, aside),
	#{c(chat chatContent)} > #{c(memberList container)}
	) {
		&:is(:hover,:focus-within) {
			transform: translateX(calc(-1 * ((var(--width,240px) - 60px) * var(--hide-var, --hide-fallback-enabled))));
			backdrop-filter: blur(calc(var(--hide-var, --hide-fallback-enabled) * 3px));
		}
	}
}

// EGGS!
#{c(main focused)}#{c(main options fullMotion)} #{c(search noResultsImage)}#{c(search OOOOHHHHHHHHBANANA)},
#{c(main focused)}#{c(main options reduceMotion)} #{c(search noResultsImage)}#{c(search OOOOHHHHHHHHBANANA)}:hover {
	animation: monke 6.9s linear infinite;
}

// Enable with Beer
// confused? https://cdn.discordapp.com/attachments/747040126294687764/827442200094179338/unknown.png
#{c(embeds textOpenFullPreview)} {
	&:before {
		content: "🍺";
	}
	> svg {
		display: none;
	}
}

// Are you a robot?
// commented bc i cannot find a way to get it up
// #{c(main areYouARobotContainer)} {
//   background-color: $header;
//   backdrop-filter: blur(5px);
// }

/* Checkboxes */
#{c(checkbox checkbox)} {
	border-color: $primary !important; // !important reason: element.style when selected
	&#{c(checkbox checked)} {
		box-shadow: inset 0 0 3px 1px $primary;
		border-color: $primary !important; // !important reason: element.style
		> svg > path {
			fill: $primary; 
		}
		&[style*="background-color:"] {
			background-color: transparent !important; // !important reason: element.style
		}
	}
}

/* "Other". */
// I don't know where this stuff is used in the site.
#{c(other developerPortalCtaWrapper)} {
	background-color: $card;
}
// Rings - tab around and you'll find it. Appears to have a class sans suffix/reroll.
#{c(main ring)} {
	&[style*="var(--focus-primary)"] {
		--__adaptive-focus-color: var(--primary-color) !important; // !important reason: element.style
	}
}
// #{c(main keyboardMode)} #{c(other focusStroke)} {
//   fill: $primary;
//   stroke: $primary;
// }

// insecure links
a[href^="http://"] {
	color: $red;
	text-shadow: 0 0 2px $red;
}

/* HLJS */
#{c(hljs comment)},
#{c(hljs quote)} {
	font-style: italic;
}

/* A few blurs */
#{c(loading container)} {
	backdrop-filter: blur(5px);
}
#{c(main backdrop)},
#{c(main backdropWithLayer)} {
	backdrop-filter: blur(3px) !important; // !important reason: override inline
	background-color: transparent !important; // !important reason: override inline
}

/* remove line clamps */
div#{c(text lineClamp2Plus)} {
	-webkit-line-clamp: unset !important; // !important reason: override inline.
}

/* unbreak certain modal backgrounds */
#{c(main options fullMotion)} :is(#{c(modals translate)},#{c(modals scale)}) {
	transform: unset !important; // !important reason: override other rules that have it, namely with the animator* rules.
}

/* Official Preset Previews */
$orangeSynthscape: "1186899494231613502";
$pinkSunset: "1186899552872185866";
$blueOcean: "1186899634262638692";
$yellowFlower: "1186899737824210995";
$defaultPresets: "1186899913515204700";

:is(
#message-accessories-#{$orangeSynthscape},
#message-accessories-#{$pinkSunset},
#message-accessories-#{$blueOcean},
#message-accessories-#{$yellowFlower},
#message-accessories-#{$defaultPresets}
) {
	#{c(embeds textContainerUp)} {
		transform: rotate(0deg);
		border: none;
		background-color: transparent;
	}
	#{c(embeds textContainer)} {
		@include bg($bgf: var(--local-image) center/ cover no-repeat);
		@include bg2($bgf: var(--preview-overlay,url('https://leafyluigi.github.io/images/preview-overlay.png')) center/ cover no-repeat);
	}
	#{c(embeds textFooter)} {
		width: 300px;
	}
	:is(
		#{c(embeds toggleExpandedPreview)},
		#{c(embeds attachmentName)},
		#{c(embeds attachmentSize)},
		#{c(embeds codeIcon)},
		pre
	) {
		display: none;
	}
}
// synthscape orange
#message-accessories-#{$orangeSynthscape} {
	--local-image: url('https://leafyluigi.github.io/images/Synthscape%20by%20AxiomDesign.png');
}
// yellow flower
#message-accessories-#{$yellowFlower} {
	--local-image: url('https://leafyluigi.github.io/images/Xieleqiao Town by Huangdan2060.png');
}
// pink sunset
#message-accessories-#{$pinkSunset} {
	--local-image: url('https://leafyluigi.github.io/images/Long%20Exposure%20Sunset%20at%20Hull%2C%20MA%20by%20Eric%20Moreno.png');
	--preview-overlay: url('https://leafyluigi.github.io/images/preview-overlay-pink.png');
}
// ocean blue, current default [vencord | betterdiscord]
:is(
#message-accessories-#{$blueOcean},
#message-accessories-#{$defaultPresets}
) {
	--local-image: url('https://leafyluigi.github.io/images/pexels-josh-sorenson-116359.png');
}
// use inline for defaults [vencord | betterdiscord]
#message-accessories-#{$defaultPresets} {
	#{c(chat nonMediaAttachmentsContainer)} {
		flex-direction: row;
		gap: 8px;
	}
	#{c(chat nonMediaAttachmentItem)} {
		&+#{c(chat nonMediaAttachmentItem)} {
			margin: 0;
		}
		&:first-child {
			--client-mod-image: url('https://leafyluigi.github.io/images/vencord.png');
		}
		&:last-child {
			--client-mod-image: url('https://leafyluigi.github.io/images/betterdiscord.png');
		}
	}
	#{c(chat messageAttachmentsContainer)} {
		&::before {
			content: "";
			background: var(--client-mod-image,none) center/cover no-repeat;
			width: 48px;
			height: 48px;
			position: absolute;
			top: 0;
			right: 0;
			z-index: 1;
		}
	}
}


// /* Redownload pls bar */
// #{c(main appContainer)}::before {
//   content: "Your version of Pyrite is outdated. Please redownload.";
//   text-align: center;
//   position: absolute;
//   color: #fff;
//   white-space: pre-wrap;
//   box-sizing: border-box;
//   padding: 10px 0;
//   background-color: $header;
//   display: var(--update-notice-dec23, block);
//   z-index: 2500;
// }