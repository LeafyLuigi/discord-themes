@use "backend" as *;
/* Start Sidebar */
// backgrounds.. ugh.
#{c(sidebar panel container)} {
	background: transparent;
}
#{c(sidebar server container)},
#{c(sidebar panel activity activityPanel)} {
	background: transparent;
}

// Base
#{c(sidebar)} {
	// for hide channel list
	overflow-x: hidden;
	// notice stuff
	// top: calc($nc * -36px);
	position: relative;
	// math is hard.
	height: calc(100vh
		- (var(--horizontal-server-list-enabled, 0) * var(--server-container, 0px))
		- var(--channel-tabs-enabled,0) * (
			(var(--channel-tabs-tabBar-enabled,1) * var(--channel-tabs-favBar-enabled,1) * 5px)
			+ (var(--channel-tabs-tabBar-enabled,1) *
				(var(--channelTabs-tabHeight,32px) + 3px)
			)
			+ (var(--channel-tabs-favBar-enabled,1) *
				(var(--channelTabs-favHeight,28px) + 3px)
			)
		)
		- (var(--windows-titlebar-enabled,0) * 18px)
	);
	// end notice stuff
	
	background: transparent;
	&::before,
	&::after {
		content: none;
	}
	#{c(serverList)}#{c(serverList hidden)} + & {
		height: 100vh;
	}
}
#{c(sidebar list)} {
	overflow: visible;
	border: none;
	border-radius: 0;
}
// Area - Friends List
#{c(sidebar private channels)} {
	background: transparent;
	#{c(sidebar private inviteButtonIcon)} {
		color: var(--interactive-normal);
		order: -1;
		&:hover {
			color: var(--interactive-hover);
			// filter: drop-shadow(0 0 2px var(--interactive-normal));
		}
	}
}
#{c(sidebar private searchBar)} {
	background: $header;
	z-index: 1010;
	box-shadow: none;
	border: none;
	box-sizing: content-box; // revert border-box
	// remove that fucking button colour
	#{c(button lookFilled)}#{c(button colorPrimary)} {
		background: transparent;
		&::before {
			content: none;
		}
	}
	#{c(sidebar private searchBarComponent)} {
		-webkit-app-region: no-drag;
		background: $card;
	}
}
#{c(sidebar private scroller)} {
	background: $side;
	&,
	#{c(main alignChatInput)} & {
		margin-bottom: var(--custom-app-panels-height,0);
		padding-bottom: 0;
	}
}
#{c(sidebar private link)}:is(
	[href="/store"],
	[href="/library"],
	[href="/shop"]
),
#{c(sidebar private channelBadgeIcon)} {
	display: none;
}
@if $lite != 1 {
	#{c(sidebar private loadingEmpty)} {
		fill: $primary;
	}

	#{c(sidebar private headerText)} {
		color: var(--category-color);
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		&::before {
			content: "";
			height: 2px;
			flex-grow: 1;
			margin-right: 5px;
			background: linear-gradient(to left, currentColor -50%, transparent 50%);
		}
	}
}
// Area - Servers
#{c(sidebar server container)} {
	margin-left: 0; // remove a single dark pixel for notices.
	#{c(main alignChatInput)} & {
		padding-bottom: var(--custom-app-panels-height,0);
	}
}
#{c(scroller content)} {
	// banner spacer thing
	>div[style="height: 84px;"]{
		height: 132px !important; // !important reason: element.style
	}
}
#{c(sidebar server header container)} {
	background: $header;
	box-shadow: none;
}
#{c(sidebar server name)} {
	@include header;
	display: flex;
	justify-content: center;
}
#{c(sidebar server header bannerContainer)} {
	background: transparent;
	top: calc(48px + (36px * $nc));
	z-index: 2;
	&[style*="(-90px)"] {
		z-index: -3000;
	}
}
#{c(sidebar server header bannerImage)} {
	&:before {
		content: none;
	}
}
#{c(sidebar server scroller)} {
	margin-bottom: 0;
	margin-right: 0;
	background: $side;
	#{c(main alignChatInput)} & {
		padding-bottom: 0;
	}
}

@if $lite != 1 {
	#{c(sidebar server channel modeUnreadImportant)} {
		#{c(sidebar server channel icon)} {
			color: inherit;
		}
		#{c(sidebar server channel unreadBlob)} {
			background: $primary;
		}
	}
}
#{c(sidebar server header header)} {
	z-index: 1010;
	border-radius: 0;
	border: none;
	#{c(sidebar server header hasBanner)} & {
		border: none;
	}
	#{c(sidebar server header hasBanner)} &,
	#{c(sidebar server header hasBanner)} &:hover {
		box-shadow: none;
	}
	#{c(sidebar server header bannerVisible)} & {
		filter: none;
	}
}
#{c(sidebar server channel voice avatarSpeaking)},
#{c(avatar speaking)} {
	box-shadow: inset 0 0 0 2px $primary;
}
#{c(sidebar loadingAnimationContainer)} {
	padding-top: calc(48px + 16px); // 48 for top bar, 16 from original css rule
	@include bg($bg:$header,$h:48px);
	@include bg2($bg:$side,$top:48px);
}
#{c(sidebar loadingCategory)},
#{c(sidebar loadingChannelIcon)},
#{c(sidebar loadingChannelName)} {
	background: $primary;
}
// remove banner backdrop blur thing
#{c(sidebar server header bannerVisible)} {
	:is(
		#{c(sidebar server header eclipseBackdrop)},
		#{c(sidebar server header eclipseForeground)},
		#{c(sidebar server header glass)}
	) {
		background: none;
		backdrop-filter: none;
	}
}

// #{c(sidebar server unreadBar old unreadParent)} {
// 	width: 224px;
// }

// Panels
#{c(sidebar panel panels)} {
	left: 0;
	bottom: 0;
	width: 100%;
	box-shadow: none;
	background: $side;
	border: none;
	border-radius: 0;
	#{c(sidebar panel username)} {
		@include header;
	}
	:is(
		// #{c(sidebar panel container)} #{c(sidebar panelButtonRow)},
		// #{c(sidebar panel voice container)} #{c(sidebar panel voice inner)} ~ #{c(sidebar panelButtonRow)},
		#{c(sidebar panel activity activityPanel)} #{c(sidebar panel activityActions)}
	) {
		border: 1px solid $middle;
		border-radius: 8px;
	}
}
#{c(sidebar panel buttons buttons)} {
	background: transparent;
	box-sizing: content-box;
	border-radius: 8px;
	gap: 0;
	border: none;
	#{c(sidebar panel buttons button)} {
		@include bg($bg:$primary,$o:.6);
	@if $lite != 1 {
			&:last-child::before {
				border-top-right-radius: 8px;
				border-bottom-right-radius: 8px;
			}
			&:hover {
				background-color: transparent;
			}
			&:hover::before {
				background-color: $hover;
			}
		}
	}
}

@if $lite != 1 {
	// mic button is a special case for some reason
	#{c(sidebar panel buttons micButtonParent)} #{c(sidebar panel buttons button)}::before {
		border-bottom-left-radius: 8px;
		border-top-left-radius: 8px;
		#{c(sidebar panel buttons buttons)} & {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
		}
	}

	#{c(sidebar server category children)} {
		order: 1;
	}
	#{c(sidebar server category mainContent)} {
		order: 2;
	}

	#{c(sidebar server category wrapper)} #{c(sidebar server category name)} {
		display: flex;
		justify-content: center;
		align-items: center;
		&::before {
			content: "";
			height: 2px;
			flex-grow: 1;
			background: transparent;
			margin-right: 5px;
		}
	}


	#{c(sidebar server channel voiceLimitWrapper)} {
		height: 20px; // force it :)
		line-height: 20px;
		background: $card;
		border: none;
	}
	#{c(sidebar server channel voiceLimitUsers)} {
		background: transparent;
	}
	#{c(sidebar server channel voiceLimitTotal)} {
		background: transparent;
		&::after {
			content: "/";
			width: auto;
			height: auto;
			left: -6px;
			border: none;
		}
	}

	#{c(sidebar server channel name)},
	#{c(sidebar server channel icon)},
	#{c(sidebar server category icon)},
	#{c(sidebar server category name)},
	#{c(sidebar server channel wrapper)} #{c(sidebar server channel link)} {
		color: inherit;
	}

	#{c(sidebar private interactiveBG)},
	#{c(sidebar server channel wrapper)} {
		color: var(--read-channel-color);
	}

	#{c(sidebar private interactive)} {
		&:hover,
		&:focus-within {
			background: var(--background-modifier-hover);
		}
		&:active {
			background: var(--background-modifier-active);
		}
	}

	#{c(sidebar private selectedBG)} {
		background: var(--background-modifier-selected);
	}

	#{c(sidebar server channel modeSelected)},
	#{c(sidebar private interactiveSelected)},
	#{c(sidebar server channel wrapper)}:hover:not(#{c(sidebar server channel modeMuted)},#{c(sidebar server channel modeLocked)}),
	#{c(sidebar private interactiveBG)}:hover:not(#{c(sidebar private mutedBG)}) {
		color: var(--selected-channel-color);
	}

	#{c(sidebar server channel wrapper)}:hover {
		#{c(sidebar server channel name)} {
			color: inherit;	
		}
	}

	#{c(sidebar server channel modeUnreadImportant)} {
		color: var(--unread-channel-color);
		#{c(sidebar server channel unreadBlob)} {
			display: var(--show-channel-unread-dot, block);
			background-color: currentColor;
		}
		// #{c(sidebar server channel unreadBlob)},
		// #{c(sidebar server channel name)},
		// #{c(sidebar server channel icon)} {
		// 	filter: var(--unread-channel-glow, drop-shadow(0 0 2px));
		// }
		#{c(sidebar server channel name)} {
			color: inherit;	
		}
	}

	#{c(sidebar server channel modeMuted)} {
		color: var(--muted-channel-color);
		&:hover #{c(sidebar server channel name)} {
			color: inherit;	
		}
	}
	#{c(sidebar server channel modeConnected)} {
		color: var(--category-color);
	}
	#{c(sidebar server channel modeLocked)} {
		color: var(--locked-voice-channel-color);
	}
}

#{c(sidebar server category wrapper)},
#{c(sidebar server category wrapper)}:hover {
	color: var(--category-color);
	&#{c(sidebar server category collapsed)} {
		color: var(--read-channel-color);
	}
	&#{c(sidebar server category muted)} {
		color: var(--muted-channel-color);
	}
	&:not(#{c(sidebar server category collapsed)}) {
		#{c(sidebar server category name)}::before {
			background: linear-gradient(to left, currentColor -50%, transparent 50%);
		}
	}
}

@if $lite != 1 {
	#{c(sidebar boostBar progressContainer)} {
		background: $card;
	}
}

// // Hide Sidebar
// #{c(sidebar list)} {
// 	width: calc(var(--custom-guild-sidebar-width,240px) - (168px * var(--hide-channel-list, 0)));
// 	transition: var(--hide-speed, 0.5s) width ease-out;
// 	&:hover,&:focus-within {
// 		width: var(--custom-guild-sidebar-width,240px);
// 		&::before,
// 		&::after {
// 			width: var(--custom-guild-sidebar-width,240px);
// 		}
// 	}
// 	&::before,
// 	&::after {
// 		transition: var(--hide-speed, 0.5s) width ease-out;
// 		width: calc(var(--custom-guild-sidebar-width,240px) - (168px * var(--hide-channel-list, 0)));
// 	}
// }

// notices (ie "how to use quickswitch", "boost this server" etc) and event notices
// #{c(sidebar notice container)} {
// 	width: 240px;
// }

// #{c(sidebar quests wrapper)} {
// 	display: none;
// }