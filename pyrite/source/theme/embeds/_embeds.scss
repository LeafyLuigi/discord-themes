@use "backend" as *;
/* Start Embeds */
:is(
	#{c(embeds codeblock)},
	#{c(embeds invite)},
	#{c(embeds attachment)},
	#{c(media audioWrapper)},
	#{c(embeds textContainerUp)},
	#{c(embeds threadContainer)},
	#{c(embeds poll container)},
	#{c(embeds poll finished container)},
	#{c(embeds gift)},
	#{c(embeds gameInvite)},
	#{c(embeds voiceMessage container)}
) {
	#{c(main visualRefresh)} &,
	& {
		@include card;
	}
}

#{c(embeds poll header)} #{c(embeds poll question)} {
	@include header;
}

#{c(embeds poll votedStyles)} {
	--custom-poll-style-vote-percentage: var(--secondary-color);
}
#{c(embeds poll victorStyles)} {
	--custom-poll-style-vote-percentage: var(--green-color);
}
#{c(embeds poll votePercentageBar)} {
	background-color: transparent;
	@include bg($o:0.3,$bg:var(--custom-poll-style-vote-percentage));
}

#{c(embeds poll finished victorIcon)} {
	// circle {
	// 	fill: var(--white-500);
	// }
	path {
		fill: $primary;
	}
}

#{c(embeds uploadProgressBar)} {
	background-color: $primary !important; // !important reason: element.style
}

#{c(embeds invite)} {
	:is(#{c(embeds inviteServerIcon)},#{c(embeds inviteServerIconExpired)}) {
		background-color: transparent;
	}
}
#{c(embeds inviteDestinationExpired)} {
	color: $red;
}

#{c(embeds embedFull)} {
	border-left-color: $primary;
	#{c(main visualRefresh)} &,
	& {
		background: $card;
	}
	#{c(embeds embedSuppressButton)} {
		top: 0;
		right: 0;
		color: $primary;
		&:hover {
			color: $hover;
			filter: drop-shadow(0 0 2px currentColor);
		}
	}
}

#{c(media barGrabber)},
#{c(media barProgress)} {
	background-color: $primary;
}

#{c(media barBuffer)} {
	opacity: 0.5;
}

:is(#{c(media barBuffer)},#{c(media barWrapper)},#{c(media barPreview)},#{c(media barProgress)}) {
	&:before,
	&:after {
		content: none;
	}
}

#{c(media barInteractionDragging)},
#{c(media barInteraction)}:hover {
	#{c(media barGrabber)} {
		background-color: $secondary;
	}
}

#{c(hljs)} {
	background: transparent;
	transform: rotate(0deg); // this is for codelangs :)
}

#{c(embeds textContainer)},
#{c(embeds textFooter)} {
	#{c(main visualRefresh)} &,
	& {
		background: transparent;
		border: none;
	}
}

// #{c(embeds gameInvite)} {
// }
#{c(embeds gameCoverImageWrapper)} {
	max-width: unset;
	&~ #{c(embeds gameFullHeight)} {
		#{c(embeds gameArtwork)} {
			display: none;
		}
		// #{c(embeds gameState)} {
		// 	display: flex;
		// 	font-size: 0;
		// 	> span {
		// 		font-size: 16px;
		// 	}
		// }
	}
}
#{c(embeds gameCoverImage)} {
	mask: none;
	&:is(
		#{c(embeds gameCoverImageActionable)}#{c(embeds gameCoverImageBlurred)},
		#{c(embeds gameCoverImageNotActionable)}
	) {
		filter: none;
	}
}
#{c(embeds gameHeader)} {
	@include header;
}

#{c(media audioControls)} {
	min-width: 400px;
}

#{c(embeds gift)} {
	&:hover {
		#{c(main visualRefresh)} &,
		& {
			background: $card;
		}
	}
	#{c(embeds giftInvalidPoop)} {
		background-color: transparent; // has image
	}
}
// #{c(media audioWrapper)} {
// 	width: 100% !important; // !important reason: element.style
// }
#{c(embeds inviteResolvingBackground)} {
	background-image: linear-gradient(90deg,$primary,$secondary,$primary);
}
#{c(embeds gameInvite)} {
	height: 250px;
	max-width: 250px;
	padding: 10px;
}

#{c(embeds voiceMessage container)} {
	&:not(#{c(embeds voiceMessage playing)}) {
		#{c(embeds voiceMessage playButtonContainer)} {
			&:active,
			& {
				background: $primary;
			}
			&:hover {
				background: $hover;
			}
		}
	}
}
#{c(embeds voiceMessage ripple)} {
	// background: $primary;
	background: transparent;
}