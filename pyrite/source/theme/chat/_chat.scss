@use "backend" as *;
/* Begin Chat */
#{c(chat)},
#{c(chat chatLoadingWrapper)},
#{c(chat messageLoadingWrapper)} {
	background: transparent;
}
// yay random gradients
#{c(chat gradient)} {
	background: none;
}
// border shows up when opening a thread
#{c(chat)}[data-has-border=true] {
	border: none;
}
#{c(chat chatContent)} {
	&::before {
		content: none;
	}
	#{c(forums loadingContainer)} {
		background: $middle;
	}
}
#{c(main midnight)} {
	:is(
		#{c(chat chatContent)},
		#{c(chat subtitleContainer)},
		#{c(chat page)}
	) {
		border-left: none;
	}
}
#{c(chat noChat)}#{c(chat chatContent)} {
	background: $middle;
}

#{c(chat chatScrollerNSFW)},
#{c(chat chatContentInner)} {
	background: $middle;
}

@if $lite != 1 {
	#{c(chat noChannel)} {
		@include bg($h:48px,$bg:$header);
		@include bg2($bg:$middle,$h:calc(100vh - 48px),$top:48px);
	}
	#{c(chat ephemeralMessage)} {
		color: var(--text-default);
	}
}

#{c(chat buttonWrapper)} {
	padding: 0;
	border: none;
	box-sizing: content-box;
	border-radius: 8px;
	background: transparent;
	#{c(chat buttonSeparator)} {
		display: none;
	}
	#{c(chat button)} {
		@include bg($bg:var(--profile-primary-color,$primary),$o:0.6);
		&:first-of-type::before {
			border-bottom-left-radius: 8px;
			border-top-left-radius: 8px;
		}
		&:last-of-type::before {
			border-top-right-radius: 8px;
			border-bottom-right-radius: 8px;
		}
		&:hover {
			background-color: transparent;
		}
		&:hover::before {
			background-color: var(--profile-secondary-color,$hover);
		}
	}
}

#{c(chat dividerHasContent)} {
	border-top-color: transparent;
	&#{c(chat dividerUnread)} {
		#{c(chat dividerContent)} {
			font-weight: bold;
		}
		#{c(chat unreadPill)} {
			top: unset;
		}
	}
}

#{c(chat dividerContent)} {
	text-align: center;
	color: $primary;
	font-weight: normal;
	margin: 0 8px;
	padding: 2px 10px;
	flex: 1 1 auto;
	background: var(--hsl-date-divider-background);
}

#{c(chat newMessagesBar)} {
	background: $primary;
	box-shadow: none;
	opacity: 0.75;
	&:hover {
		opacity: 0.9;
	}
	&:active {
		padding-top: 0;
		opacity: 1;
	}
}

@if $lite != 1 {
	#{c(chat repliedMessage)} {
		#{c(chat repliedMessageClickableSpine)} {
			border-color: $primary;
		}
		// #{c(chat replyBadge)} {
		// 	background: $card;
		// }
		// allows for spoiler hover
		#{c(chat repliedTextPreview)} #{c(chat repliedTextContent)} {
			pointer-events: unset;
			// disallow click links
			:is(
				a,
				span
			):not(
				#{c(chat spoiler content)}
			) {
				pointer-events: none;
			}
		}
	}

	#{c(chat chatHeader)} {
		#{c(chat emptyChannelIcon)} {
			background: $card;
		}
		#{c(chat chatHeaderButton)},
		#{c(chat chatHeaderButton)}:hover {
			color: $primary;
		}
	}
	#{c(chat allowedRole)} {
		background: $card;
	}
}

@if $lite != 1 {
#{c(chat messageContent)} {
	#{c(chat chatTimestamp)} {
		#{c(chat chatEdited)} {
			display: none;
		}
		// for the "(edited $time)" translation string, check the i18n file :)
	}
}
}

#{c(chat spoiler content)}#{c(chat spoiler hidden)} {
	--__current--spoiler-text-color: inherit;
}

@if $lite != 1 {
	#{c(chat spoiler content)}#{c(chat spoiler hidden)}:hover {
		opacity: var(--spoiler-hover-opacity);
		#{c(chat spoiler obscuredTextContentInner)} :is(span, code) {
			transition: opacity .5s .5s ease-in-out;
			opacity: 1;
		}
	}


	// who the hell uses those wave stickers?
	#{c(chat compactContainer)},
	#{c(chat compactButton)},
	#{c(chat containerExpanded)} {
		display: none;
	}

	#{c(chat botTag)} {
		background: $primary;
		&#{c(chat botTagOp)} {
			background: $card;
			color: $primary;
			font-weight: 600;
		}
	}

	#{c(chat gifFavoriteButton)} {
		background: $card;
		#{c(chat gifFavoriteSelected)}#{c(chat gifFavoriteShowPulse)} #{c(chat gifFavoriteIcon)} {
			animation: gifBounce .4s linear;
		}
		#{c(chat gifFavoriteSelected)}#{c(chat gifFavoriteShowPulse)}:after {
			animation: gifRipple .45s ease;
		}
		&::after {
			border-color: $primary;
		}
		&:hover,
		&#{c(chat gifFavoriteSelected)} {
			color: $primary;
		}
	}
}


#{c(chat zalgoBlocker)} #{c(chat messageContent)},
#{c(chat chatUsername)} {
	overflow: visible;
}

#{c(chat blockquoteContainer)} blockquote {
	background: $card;
	padding: 2px 8px 2px 12px;
}
#{c(chat blockquoteDivider)} {
	background: $primary;
}

@if $lite != 1 {
	#{c(reaction reaction)} {
		&,&#{c(reaction me)},&:hover,&:active {
			background: $card;
		}
		&:hover {
			border-color: $hover;
		}
		&:active {
			border-color: $primary;
		}
		&#{c(reaction me)} {
			border-color: $secondary;
			#{c(reaction count)} {
				color: $primary;
				// text-shadow: .125rem .125rem calc(var(--blur-intensity,1) * .1875rem);
			}
		}
		#{c(reaction count)} {
			color: var(--text-muted);
		}
	}
}

#{c(chat welcomeCTA)} {
	display: none;
}

@if $lite != 1 {
	#{c(chat chatUsernameTimedOut)} path {
		fill: $red;
	}

	#{c(chat channelLinkUserMentionWrapper)} {
		background: color-mix(in oklab, $primary 25%, transparent);
		color: var(--interactive-hover);
		transition: color 50ms ease-out, background 50ms ease-out;
		&:hover {
			color: var(--interactive-active);
			background: color-mix(in oklab, $primary 75%, transparent);
		}
	}
	#{c(chat mentioned)} {
		#{c(chat channelLinkUserMentionWrapper)} {
			color: var(--interactive-active);
			background: color-mix(in oklab, $primary 75%, transparent);
		}
	}

	// vc chat
	#{c(call wrapper)}#{c(chat chatSidebarOpen)} #{c(call container)} {
		border-radius: 0;
	}
}

// message backgrounds such as @mention, ephemeral and :hover
#{c(chat mentioned)},
#{c(chat ephemeral)} {
	&::before {
		content: none;
	}
}

// from some bottom aligned chat input thing
#{c(chat scrollerSpacer)} {
	height: var(--space-16);
}